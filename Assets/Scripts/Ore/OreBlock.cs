using UnityEngine;

public class OreBlock : MonoBehaviour
{
    public Sprite[] damageStages;
    // –¢–£–¢ –ë–£–î–£–¢–¨ –ü–†–ï–§–ê–ë–ò –û–ë'–Ñ–ö–¢–Ü–í, –©–û –í–ò–ü–ê–î–ê–Æ–¢–¨ –£ –°–í–Ü–¢–Ü (–∑ PickableItem —Ç–∞ ItemHolder)
    public GameObject[] orePrefabs; // –°—é–¥–∏ –ø–µ—Ä–µ—Ç—è–≥—É—î—Ç–µ Purple_fifth.prefab, Red_fifth.prefab —Ç–æ—â–æ
    public int[] oreAmounts; // –ö—ñ–ª—å–∫—ñ—Å—Ç—å —ñ–Ω—Å—Ç–∞–Ω—Ü—ñ–π –∫–æ–∂–Ω–æ–≥–æ –ø—Ä–µ—Ñ–∞–±—É
    public int clicksPerDamage = 3;

    private int currentStage = 0;
    private int clickCount = 0;

    private SpriteRenderer spriteRenderer;

    private void Awake()
    {
        spriteRenderer = GetComponent<SpriteRenderer>();
    }

    public void Mine()
    {
        Debug.Log("‚öí Mine() –≤–∏–∫–ª–∏–∫–∞–Ω–æ");
        clickCount++;
        if (clickCount >= clicksPerDamage)
        {
            TakeDamage();
            clickCount = 0;
        }
    }

    private void TakeDamage()
    {
        Debug.Log("üí• TakeDamage() ‚Äî —Å—Ç–∞–¥—ñ—è " + currentStage);
        if (currentStage < damageStages.Length)
        {
            spriteRenderer.sprite = damageStages[currentStage];
            // –¢—É—Ç –ø—Ä–æ—Å—Ç–æ –≤–∏–∫–ª–∏–∫–∞—î–º–æ DropOre –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–∞–¥—ñ—ó
            DropOre(oreAmounts.Length > currentStage ? oreAmounts[currentStage] : 1);
            currentStage++;
        }
        else
        {
            // –§—ñ–Ω–∞–ª—å–Ω–∏–π –¥—Ä–æ–ø —ñ –∑–Ω–∏—â–µ–Ω–Ω—è –±–ª–æ–∫—É —Ä—É–¥–∏
            DropOre(3); // –∞–±–æ –±—ñ–ª—å—à–∞ —Ñ—ñ–Ω–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å
            Destroy(gameObject);
        }
    }

    private void DropOre(int amount)
    {
        for (int i = 0; i < amount; i++)
        {
            // –û–±–∏—Ä–∞—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –ø—Ä–µ—Ñ–∞–± –∑ –º–∞—Å–∏–≤—É
            GameObject selectedOrePrefab = orePrefabs[Random.Range(0, orePrefabs.Length)];

            Vector2 dropPos = (Vector2)transform.position + new Vector2(Random.Range(-0.3f, 0.3f), Random.Range(-0.1f, 0.1f));
            
            // –Ü–Ω—Å—Ç–∞–Ω—Ü—ñ—é—î–º–æ –ø—Ä–µ—Ñ–∞–±, —è–∫–∏–π —É–∂–µ –º–∞—î PickableItem —Ç–∞ ItemHolder
            GameObject spawnedOre = Instantiate(selectedOrePrefab, dropPos, Quaternion.identity);

            ItemHolder holder = spawnedOre.GetComponent<ItemHolder>();
            if (holder == null)
            {
                Debug.LogError($"Spawned ore {spawnedOre.name} is missing an ItemHolder component!");
            }
        }
    }
}