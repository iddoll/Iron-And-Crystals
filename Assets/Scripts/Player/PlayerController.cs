using UnityEngine;
using System.Collections;

public class PlayerController : MonoBehaviour
{
    public static PlayerController Instance;

    public float moveSpeed = 2f;
    public float jumpForce = 10f;
    private Rigidbody2D rb;
    private Animator animator;

    public Transform groundCheck; // –ü–æ–∑–∏—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑–µ–º–ª—ñ
    public LayerMask groundLayer; // –®–∞—Ä(–∏), —è–∫—ñ –≤–≤–∞–∂–∞—é—Ç—å—Å—è "–∑–µ–º–ª–µ—é"
    public float groundCheckRadius = 0.2f; // –†–∞–¥—ñ—É—Å –∫–æ–ª–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑–µ–º–ª—ñ

    public Transform holdPoint;
    private GameObject heldObject; // –û–±'—î–∫—Ç, —è–∫–∏–π —Ç—Ä–∏–º–∞—î –≥—Ä–∞–≤–µ—Ü—å (–µ–∫—ñ–ø—ñ—Ä–æ–≤–∞–Ω–∏–π –ø—Ä–µ—Ñ–∞–±)

    private string currentTool = "None";
    public float miningRadius = 2f;
    private bool isMining = false;

    private void Awake()
    {
        if (Instance == null) Instance = this;
        else Destroy(gameObject);
    }

    void Start()
    {
        rb = GetComponent<Rigidbody2D>();
        animator = GetComponent<Animator>();
        isMining = false;
    }

    void Update()
    {
        bool isGrounded = Physics2D.OverlapCircle(groundCheck.position, groundCheckRadius, groundLayer);

        float moveInput = Input.GetAxis("Horizontal");
        rb.linearVelocity = new Vector2(moveInput * moveSpeed, rb.linearVelocity.y);

        animator.SetBool("isMooving", moveInput != 0);

        if (moveInput > 0)
            transform.localScale = new Vector3(1, 1, 1);
        else if (moveInput < 0)
            transform.localScale = new Vector3(-1, 1, 1);

        if (Input.GetKeyDown(KeyCode.Space) && isGrounded)
        {
            rb.linearVelocity = new Vector2(rb.linearVelocity.x, jumpForce);
        }

        if (Input.GetMouseButtonDown(0) && !isMining)
        {
            if (HasPickaxe())
            {
                Debug.Log("üî® –ú–∞—î–º–æ –ø—ñ–∫a? " + HasPickaxe());
                OreBlock targetOre = FindNearestOre();
                if (targetOre != null)
                {
                    isMining = true;
                    targetOre.Mine();
                    StartCoroutine(ResetMiningAnimation());
                }
            }
            else if (HasSword())
            {
                // animator.SetTrigger("isAttacking");
            }
            else if (HasAxe())
            {
                // animator.SetTrigger("isChopping");
            }
        }
        if (Input.GetKeyDown(KeyCode.Q))
        {
            // –í–∏–∫–∏–¥–∞—î–º–æ –ø—Ä–µ–¥–º–µ—Ç –∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ª–æ—Ç—É —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—é
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∞–∫—Ç–∏–≤–Ω–∏–π —Å–ª–æ—Ç
            if (InventorySystem.Instance != null && InventorySystem.Instance.GetActiveSlot() != null)
            {
                Item itemInHand = InventorySystem.Instance.GetActiveSlot().GetItem();
                if (itemInHand != null)
                {
                    DropItemFromInventory(itemInHand); // –í–∏–∫–ª–∏–∫–∞—î–º–æ –Ω–æ–≤–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –≤–∏–∫–∏–¥–∞–Ω–Ω—è
                }
                else
                {
                    Debug.Log("–ù—ñ—á–æ–≥–æ –≤–∏–∫–∏–¥–∞—Ç–∏ –∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ª–æ—Ç–∞.");
                }
            }
            else
            {
                Debug.Log("–ê–∫—Ç–∏–≤–Ω–∏–π —Å–ª–æ—Ç —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –ø–æ—Ä–æ–∂–Ω—ñ–π.");
            }
        }

        if (Input.GetKeyDown(KeyCode.Alpha1)) InventorySystem.Instance.SetActiveSlot(0);
        if (Input.GetKeyDown(KeyCode.Alpha2)) InventorySystem.Instance.SetActiveSlot(1);
        if (Input.GetKeyDown(KeyCode.Alpha3)) InventorySystem.Instance.SetActiveSlot(2);
        if (Input.GetKeyDown(KeyCode.Alpha4)) InventorySystem.Instance.SetActiveSlot(3);
        if (Input.GetKeyDown(KeyCode.Alpha5)) InventorySystem.Instance.SetActiveSlot(4);
    }

    private IEnumerator ResetMiningAnimation()
    {
        animator.SetBool("isMining", true);
        float timer = 0f;
        while (!animator.GetCurrentAnimatorStateInfo(0).IsName("Player_Ore_Mining_Anim") && timer < 1.0f)
        {
            timer += Time.deltaTime;
            yield return null;
        }

        if (animator.GetCurrentAnimatorStateInfo(0).IsName("Player_Ore_Mining_Anim"))
        {
            AnimatorStateInfo stateInfo = animator.GetCurrentAnimatorStateInfo(0);
            yield return new WaitForSeconds(stateInfo.length);
        }
        else
        {
            yield return new WaitForSeconds(0.5f);
            Debug.LogWarning("Mining animation state was not entered correctly.");
        }

        animator.SetBool("isMining", false);
        isMining = false;
    }

    void OnDrawGizmos()
    {
        if (groundCheck != null)
        {
            Gizmos.color = Color.red;
            Gizmos.DrawWireSphere(groundCheck.position, groundCheckRadius);
        }
    }

    public bool HasPickaxe() => currentTool == "Pickaxe";
    public bool HasSword() => currentTool == "Sword";
    public bool HasAxe() => currentTool == "Axe";
    public string GetCurrentTool() => currentTool;
    public void SetCurrentTool(string toolName)
    {
        Debug.Log("üîß –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: " + toolName);
        currentTool = toolName;
    }
    private OreBlock FindNearestOre()
    {
        GameObject[] ores = GameObject.FindGameObjectsWithTag("OreBlock");
        OreBlock nearest = null;
        float closestDist = miningRadius;

        foreach (GameObject ore in ores)
        {
            float dist = Vector2.Distance(transform.position, ore.transform.position);
            if (dist <= closestDist)
            {
                closestDist = dist;
                nearest = ore.GetComponent<OreBlock>();
            }
        }
        return nearest;
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –µ–∫—ñ–ø—ñ—Ä–æ–≤–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ (—Å—Ç–≤–æ—Ä—é—î –≤—ñ–∑—É–∞–ª—å–Ω–∏–π –æ–±'—î–∫—Ç –≤ —Ä—É—Ü—ñ)
    public void EquipItem(Item item)
    {
        Debug.Log($"[PlayerController] EquipItem –≤–∏–∫–ª–∏–∫–∞–Ω–æ –¥–ª—è {item?.name ?? "null Item"}"); // –î–æ–¥–∞–Ω–æ –ª–æ–≥ –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        
        // –°–ø–æ—á–∞—Ç–∫—É –¥–µ-–µ–∫—ñ–ø—ñ—Ä—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –ø—Ä–µ–¥–º–µ—Ç, —è–∫—â–æ –≤—ñ–Ω —î
        if (heldObject != null)
        {
            UnequipItem();
        }

        if (item != null && item.equippedPrefab != null)
        {
            heldObject = Instantiate(item.equippedPrefab, holdPoint.position, Quaternion.identity, holdPoint);
            heldObject.transform.localPosition = Vector3.zero;
            heldObject.transform.localRotation = Quaternion.Euler(0, 0, -90); // –ú–æ–∂–ª–∏–≤–æ, –ø–æ—Ç—Ä—ñ–±–Ω–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤

            // –í—ñ–¥–∫–ª—é—á–∞—î–º–æ —Ñ—ñ–∑–∏–∫—É –¥–ª—è –µ–∫—ñ–ø—ñ—Ä–æ–≤–∞–Ω–æ–≥–æ –æ–±'—î–∫—Ç–∞
            Rigidbody2D rbHeld = heldObject.GetComponent<Rigidbody2D>();
            if (rbHeld != null)
            {
                rbHeld.simulated = false; // –í–∏–º–∏–∫–∞—î–º–æ —Å–∏–º—É–ª—è—Ü—ñ—é —Ñ—ñ–∑–∏–∫–∏
                rbHeld.isKinematic = true; // –†–æ–±–∏–º–æ –π–æ–≥–æ –∫—ñ–Ω–µ–º–∞—Ç–∏—á–Ω–∏–º (–Ω–µ –ø—ñ–¥–¥–∞—î—Ç—å—Å—è –∑–æ–≤–Ω—ñ—à–Ω—ñ–º —Å–∏–ª–∞–º)
            }
            SetCurrentTool(item.name);
            Debug.Log("–°–ø—Ä–æ–±–∞ –µ–∫—ñ–ø—ñ—Ä—É–≤–∞—Ç–∏: " + item.name);
        }
        else
        {
            SetCurrentTool("None");
            Debug.Log("–°–ø—Ä–æ–±–∞ –µ–∫—ñ–ø—ñ—Ä—É–≤–∞—Ç–∏ null-–ø—Ä–µ–¥–º–µ—Ç –∞–±–æ –ø—Ä–µ–¥–º–µ—Ç –±–µ–∑ equippedPrefab. –°–∫–∏–Ω—É—Ç–æ –ø–æ—Ç–æ—á–Ω–∏–π —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç.");
        }
    }

    public void UnequipItem()
    {
        if (heldObject != null)
        {
            Destroy(heldObject);
            heldObject = null;
            SetCurrentTool("None");
            Debug.Log("–ü—Ä–µ–¥–º–µ—Ç —É—Å–ø—ñ—à–Ω–æ –¥–µ-–µ–∫—ñ–ø—ñ—Ä–æ–≤–∞–Ω–æ.");
        }
    }

    public void DropItemFromInventory(Item itemToDrop)
    {
        // ... (–≤–∞—à —ñ—Å–Ω—É—é—á–∏–π –∫–æ–¥ DropItemFromInventory) ...
        if (itemToDrop == null || itemToDrop.worldPrefab == null) //
        {
            Debug.LogWarning($"–ù–µ–º–æ–∂–ª–∏–≤–æ –≤–∏–∫–∏–Ω—É—Ç–∏ {itemToDrop?.name ?? "null"}: –ø—Ä–µ–¥–º–µ—Ç null –∞–±–æ –Ω–µ–º–∞—î worldPrefab."); //
            return; //
        }

        Vector3 dropPosition = transform.position + (Vector3)(transform.localScale.x > 0 ? Vector2.right : Vector2.left) * 0.5f; //

        GameObject droppedWorldObject = Instantiate(itemToDrop.worldPrefab, dropPosition, Quaternion.identity); //
        droppedWorldObject.transform.parent = null; //

        float randomZRotation = Random.Range(-25f, 25f); //
        droppedWorldObject.transform.rotation = Quaternion.Euler(0, 0, randomZRotation); //

        Rigidbody2D rbDropped = droppedWorldObject.GetComponent<Rigidbody2D>(); //
        if (rbDropped != null) //
        {
            rbDropped.simulated = true; //
            rbDropped.isKinematic = false; //
            float direction = transform.localScale.x > 0 ? 1f : -1f; //
            rbDropped.AddForce(new Vector2(direction, 0.5f) * 3f, ForceMode2D.Impulse); //
            rbDropped.AddTorque(Random.Range(-5f, 5f), ForceMode2D.Impulse); //
        }
        InventorySystem.Instance.RemoveItem(itemToDrop); //
        Debug.Log($"–í–∏–∫–∏–Ω—É—Ç–æ {itemToDrop.itemName} –∑ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—è —Ç–∞ —É —Å–≤—ñ—Ç."); //
    }

    public bool IsHolding(Item item)
    {
        if (heldObject == null || item == null) return false;

        if (currentTool == item.name) return true;

        return false;
    }
}