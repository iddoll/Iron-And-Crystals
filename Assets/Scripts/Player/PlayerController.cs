using UnityEngine;
using System.Collections;

public class PlayerController : MonoBehaviour
{
    public static PlayerController Instance;
    
    [Header("Player Stats")]
    public float maxHealth = 100f;
    private float currentHealth;
    public float moveSpeed = 2f;
    public float jumpForce = 10f;
    
    [Header("Combat Settings")]
    public float damageCooldown = 1f;
    private bool canTakeDamage = true;
    
    private Rigidbody2D rb;
    private Animator animator;

    public Transform groundCheck;
    public LayerMask groundLayer;
    public float groundCheckRadius = 0.2f;

    public Transform holdPoint;
    private GameObject heldObject;
    private Item currentEquippedItem;

    private string currentTool = "None";
    public float miningRadius = 2f;
    private bool isMining = false;

    public float attackRadius = 1.5f;
    public float attackDamage = 25f;
    public LayerMask enemyLayer;
    private bool isAttacking = false; // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ü—é –∑–º—ñ–Ω–Ω—É –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—é —Å—Ç–∞–Ω—É
    private bool canAttack = true;
    public float attackCooldown = 2f;
    
    private void Awake()
    {
        if (Instance == null) Instance = this;
        else Destroy(gameObject);
    }

    void Start()
    {
        rb = GetComponent<Rigidbody2D>();
        animator = GetComponent<Animator>();
        currentHealth = maxHealth;
    }

    private void Update()
    {
        bool isGrounded = Physics2D.OverlapCircle(groundCheck.position, groundCheckRadius, groundLayer);

        float moveInput = Input.GetAxis("Horizontal");
        rb.linearVelocity = new Vector2(moveInput * moveSpeed, rb.linearVelocity.y);

        animator.SetBool("isMooving", moveInput != 0);
        
        // –î–æ–¥–∞–Ω–æ: Idle –¥–ª—è —Å–ø–∏—Å–∞
        if (currentEquippedItem != null && currentEquippedItem.itemType == ItemType.Lance && !isAttacking && !isMining)
        {
            animator.Play("Spear_Idle");
        }

        if (moveInput > 0)
            transform.localScale = new Vector3(1, 1, 1);
        else if (moveInput < 0)
            transform.localScale = new Vector3(-1, 1, 1);
        
        if (Input.GetKeyDown(KeyCode.Space) && isGrounded)
        {
            rb.linearVelocity = new Vector2(rb.linearVelocity.x, jumpForce);
        }

        // –ê—Ç–∞–∫–∞
        if (Input.GetMouseButtonDown(0) && !isMining && !isAttacking && canAttack)
        {
            if (currentEquippedItem != null)
            {
                if (currentEquippedItem.itemType == ItemType.Lance)
                {
                    isAttacking = true;
                    canAttack = false;
                    animator.Play("Player_Lance_Attack_Anim");
                    StartCoroutine(ResetSpearAttackAnimation());
                    StartCoroutine(AttackCooldownCoroutine(currentEquippedItem.attackCooldown));
                }
                else if (currentEquippedItem.itemType == ItemType.Sword || currentEquippedItem.itemType == ItemType.Axe)
                {
                    isAttacking = true;
                    canAttack = false;
                    animator.SetBool("isAttacking", true);
                    StartCoroutine(ResetAttackAnimation());
                    StartCoroutine(AttackCooldownCoroutine(currentEquippedItem.attackCooldown));
                }
                else if (currentEquippedItem.itemType == ItemType.Pickaxe)
                {
                    OreBlock targetOre = FindNearestOre();
                    if (targetOre != null)
                    {
                        isMining = true;
                        animator.SetBool("isMining", true);
                        targetOre.Mine();
                        StartCoroutine(ResetMiningAnimation());
                    }
                }
            }
        }
    }

    // –ö–æ—Ä—É—Ç—ñ–Ω–∞ –¥–ª—è —Å–ø–∏—Å–∞
    private IEnumerator ResetSpearAttackAnimation()
    {
        // –ß–µ–∫–∞—î–º–æ, –ø–æ–∫–∏ –∞–Ω—ñ–º–∞—Ü—ñ—è –ø–æ—á–Ω–µ—Ç—å—Å—è
        yield return new WaitUntil(() => animator.GetCurrentAnimatorStateInfo(0).IsName("Player_Lance_Attack_Anim"));

        // –¢—É—Ç –º–æ–∂–Ω–∞ –Ω–∞–Ω–µ—Å—Ç–∏ —É—Ä–æ–Ω –≤–æ—Ä–æ–≥–∞–º
        Collider2D[] enemiesHit = Physics2D.OverlapCircleAll(transform.position, attackRadius, enemyLayer);
        foreach (Collider2D enemyCol in enemiesHit)
        {
            EnemyBase enemy = enemyCol.GetComponent<EnemyBase>();
            if (enemy != null)
            {
                enemy.TakeDamage(currentEquippedItem.damage);
                Debug.Log($"üèπ –í–¥–∞—Ä–∏–ª–∏ —Å–ø–∏—Å–æ–º {enemy.enemyName} –Ω–∞ {currentEquippedItem.damage} —É—Ä–æ–Ω—É!");
            }
        }

        // –ß–µ–∫–∞—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∞–Ω—ñ–º–∞—Ü—ñ—ó
        AnimatorStateInfo stateInfo = animator.GetCurrentAnimatorStateInfo(0);
        yield return new WaitForSeconds(stateInfo.length);

        isAttacking = false;

        // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –≤ Idle –¥–ª—è —Å–ø–∏—Å–∞
        animator.Play("Player_Idle_Lance_Anim");
    }

    private IEnumerator ResetMiningAnimation()
    {
        animator.SetBool("isMining", true);
        float timer = 0f;
        while (!animator.GetCurrentAnimatorStateInfo(0).IsName("Player_Ore_Mining_Anim") && timer < 1.0f)
        {
            timer += Time.deltaTime;
            yield return null;
        }

        if (animator.GetCurrentAnimatorStateInfo(0).IsName("Player_Ore_Mining_Anim"))
        {
            AnimatorStateInfo stateInfo = animator.GetCurrentAnimatorStateInfo(0);
            yield return new WaitForSeconds(stateInfo.length);
        }
        else
        {
            yield return new WaitForSeconds(0.5f);
            Debug.LogWarning("Mining animation state was not entered correctly.");
        }

        animator.SetBool("isMining", false);
        isMining = false;
    }

    private IEnumerator ResetAttackAnimation()
    {
        animator.SetBool("isAttacking", true);
        float timer = 0f;
        while (!animator.GetCurrentAnimatorStateInfo(0).IsName("Player_Attacking_Anim") && timer < 1.0f)
        {
            timer += Time.deltaTime;
            yield return null;
        }

        if (animator.GetCurrentAnimatorStateInfo(0).IsName("Player_Attacking_Anim"))
        {
            Collider2D[] enemiesHit = Physics2D.OverlapCircleAll(transform.position, attackRadius, enemyLayer);
            foreach (Collider2D enemyCol in enemiesHit)
            {
                EnemyBase enemy = enemyCol.GetComponent<EnemyBase>();
                if (enemy != null)
                {
                    enemy.TakeDamage(currentEquippedItem.damage);
                    Debug.Log($"üó°Ô∏è –í–¥–∞—Ä–∏–ª–∏ {enemy.enemyName} –Ω–∞ {currentEquippedItem.damage} —É—Ä–æ–Ω—É!");
                }
            }

            AnimatorStateInfo stateInfo = animator.GetCurrentAnimatorStateInfo(0);
            yield return new WaitForSeconds(stateInfo.length);
        }
        else
        {
            yield return new WaitForSeconds(0.5f);
            Debug.LogWarning("Attack animation state was not entered correctly.");
        }

        animator.SetBool("isAttacking", false);
        isAttacking = false;
    }

    private IEnumerator AttackCooldownCoroutine(float cooldownTime)
    {
        yield return new WaitForSeconds(cooldownTime);
        canAttack = true;
    }

    void OnDrawGizmos()
    {
        if (groundCheck != null)
        {
            Gizmos.color = Color.red;
            Gizmos.DrawWireSphere(groundCheck.position, groundCheckRadius);
        }
    }

    public bool HasPickaxe() => currentTool == "Pickaxe";
    public bool HasSword() => currentTool == "Sword";
    public bool HasAxe() => currentTool == "Axe";
    public string GetCurrentTool() => currentTool;
    public void SetCurrentTool(string toolName)
    {
        Debug.Log("üîß –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: " + toolName);
        currentTool = toolName;
    }
    private OreBlock FindNearestOre()
    {
        GameObject[] ores = GameObject.FindGameObjectsWithTag("OreBlock");
        OreBlock nearest = null;
        float closestDist = miningRadius;

        foreach (GameObject ore in ores)
        {
            float dist = Vector2.Distance(transform.position, ore.transform.position);
            if (dist <= closestDist)
            {
                closestDist = dist;
                nearest = ore.GetComponent<OreBlock>();
            }
        }
        return nearest;
    }

    public void EquipItem(Item item)
    {
        Debug.Log($"[PlayerController] EquipItem –≤–∏–∫–ª–∏–∫–∞–Ω–æ –¥–ª—è {item?.name ?? "null Item"}");

        if (heldObject != null)
        {
            UnequipItem();
        }

        if (item != null && item.equippedPrefab != null )
        {
            currentEquippedItem = item;
            heldObject = Instantiate(item.equippedPrefab, holdPoint.position, Quaternion.identity, holdPoint);
            heldObject.transform.localPosition = Vector3.zero;
            heldObject.transform.localRotation = Quaternion.Euler(0, 0, -90);
            SetCurrentTool(item.name);

            Rigidbody2D rbHeld = heldObject.GetComponent<Rigidbody2D>();
            if (rbHeld != null)
            {
                rbHeld.simulated = false;
                rbHeld.isKinematic = true;
            }

            // ‚úÖ –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –∞–Ω—ñ–º–∞—Ç–æ—Ä–∞
            animator.SetBool("hasLance", item.itemType == ItemType.Lance);

            Debug.Log("–°–ø—Ä–æ–±–∞ –µ–∫—ñ–ø—ñ—Ä—É–≤–∞—Ç–∏: " + item.name);
        }
        else
        {
            currentEquippedItem = null;
            SetCurrentTool("None");
            animator.SetBool("hasLance", false); // –ü—Ä–∏ –∑–Ω—è—Ç—Ç—ñ –∑–±—Ä–æ—ó
            Debug.Log("–°–∫–∏–Ω—É—Ç–æ –ø–æ—Ç–æ—á–Ω–∏–π —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç.");
        }
    }


    public void UnequipItem()
    {
        if (heldObject != null)
        {
            Destroy(heldObject);
            heldObject = null;
            SetCurrentTool("None");
            currentEquippedItem = null;
            Debug.Log("–ü—Ä–µ–¥–º–µ—Ç —É—Å–ø—ñ—à–Ω–æ –¥–µ-–µ–∫—ñ–ø—ñ—Ä–æ–≤–∞–Ω–æ.");
        }
    }

    public void DropItemFromInventory(Item itemToDrop)
    {
        if (itemToDrop == null || itemToDrop.worldPrefab == null)
        {
            Debug.LogWarning($"–ù–µ–º–æ–∂–ª–∏–≤–æ –≤–∏–∫–∏–Ω—É—Ç–∏ {itemToDrop?.name ?? "null"}: –ø—Ä–µ–¥–º–µ—Ç null –∞–±–æ –Ω–µ–º–∞—î worldPrefab.");
            return;
        }

        Vector3 dropPosition = transform.position + (Vector3)(transform.localScale.x > 0 ? Vector2.right : Vector2.left) * 0.5f;

        GameObject droppedWorldObject = Instantiate(itemToDrop.worldPrefab, dropPosition, Quaternion.identity);
        droppedWorldObject.transform.parent = null;

        float randomZRotation = Random.Range(-25f, 25f);
        droppedWorldObject.transform.rotation = Quaternion.Euler(0, 0, randomZRotation);

        Rigidbody2D rbDropped = droppedWorldObject.GetComponent<Rigidbody2D>();
        if (rbDropped != null)
        {
            rbDropped.simulated = true;
            rbDropped.isKinematic = false;
            float direction = transform.localScale.x > 0 ? 1f : -1f;
            rbDropped.AddForce(new Vector2(direction, 0.5f) * 3f, ForceMode2D.Impulse);
            rbDropped.AddTorque(Random.Range(-5f, 5f), ForceMode2D.Impulse);
        }
        InventorySystem.Instance.RemoveItem(itemToDrop);
        Debug.Log($"–í–∏–∫–∏–Ω—É—Ç–æ {itemToDrop.itemName} –∑ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—è —Ç–∞ —É —Å–≤—ñ—Ç.");
    }

    public bool IsHolding(Item item)
    {
        if (heldObject == null || item == null) return false;

        if (currentTool == item.name) return true;

        return false;
    }
    
    public void TakeDamage(float amount)
    {
        if (!canTakeDamage) return;

        currentHealth -= amount;
        Debug.Log($"–ì—Ä–∞–≤–µ—Ü—å –æ—Ç—Ä–∏–º–∞–≤ {amount} —É—Ä–æ–Ω—É. –ü–æ—Ç–æ—á–Ω–µ HP: {currentHealth}");

        canTakeDamage = false;
        StartCoroutine(DamageCooldownCoroutine());

        if (currentHealth <= 0)
        {
            Die();
        }
    }

    private IEnumerator DamageCooldownCoroutine()
    {
        yield return new WaitForSeconds(damageCooldown);
        canTakeDamage = true;
    }

    private void Die()
    {
        Debug.Log("–ì—Ä–∞–≤–µ—Ü—å –ø–æ–º–µ—Ä.");

        // –í—ñ–¥–∫–ª—é—á–∞—î–º–æ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å —Ä—É—Ö–∞—Ç–∏—Å—å, —Å—Ç—Ä–∏–±–∞—Ç–∏ —Ç–∞ –∞—Ç–∞–∫—É–≤–∞—Ç–∏.
        // –ü—Ä–æ—Å—Ç–æ –≤—ñ–¥–∫–ª—é—á–∞—î–º–æ —Å–∞–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç PlayerController.
        this.enabled = false;

        // –í–∏–º–∏–∫–∞—î–º–æ –∞–Ω—ñ–º–∞—Ç–æ—Ä (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ), —â–æ–± –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –ø—Ä–æ–¥–æ–≤–∂—É–≤–∞–≤ —Ä—É—Ö–∞—Ç–∏—Å—å.
        if (animator != null)
        {
            animator.enabled = false;
        }
        
        // –î–µ–∞–∫—Ç–∏–≤—É—î–º–æ –æ–±'—î–∫—Ç –≥—Ä–∞–≤—Ü—è —á–µ—Ä–µ–∑ –∫—ñ–ª—å–∫–∞ —Å–µ–∫—É–Ω–¥ (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
        // –∞–±–æ –ø–æ–∫–∞–∑—É—î–º–æ –µ–∫—Ä–∞–Ω "Game Over".
        // –ù–∞–ø—Ä–∏–∫–ª–∞–¥, –º–æ–∂–Ω–∞ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –∫–æ—Ä—É—Ç–∏–Ω—É, —è–∫–∞ –ø–æ—á–µ–∫–∞—î 3 —Å–µ–∫—É–Ω–¥–∏, –∞ –ø–æ—Ç—ñ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ü–µ–Ω—É.
        // StartCoroutine(RestartLevelAfterDelay(3f));
    }
    
}
