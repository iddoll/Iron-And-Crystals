using UnityEngine;

[RequireComponent(typeof(Rigidbody2D))]
public class Arrow : MonoBehaviour
{
    public float speed = 10f;
    public int damage = 10;
    public float lifeTime = 3f;

    private Rigidbody2D rb;

    private bool hasLanded = false;
    private Collider2D mainCollider;
    private Collider2D pickupTrigger;
    
    void Awake()
    {
        Collider2D[] colliders = GetComponents<Collider2D>();
        if (colliders.Length >= 2)
        {
            mainCollider = colliders[0];
            pickupTrigger = colliders[1];
        } else if (colliders.Length == 1)
        {
            mainCollider = colliders[0];
            Debug.LogWarning("–ù–∞ –ø—Ä–µ—Ñ–∞–±—ñ —Å—Ç—Ä—ñ–ª–∏ —î –ª–∏—à–µ –æ–¥–∏–Ω –∫–æ–ª–∞–π–¥–µ—Ä! –ë—É–¥—å –ª–∞—Å–∫–∞, –¥–æ–¥–∞–π—Ç–µ –¥—Ä—É–≥–∏–π –¥–ª—è —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—É –ø—ñ–¥–±–∏—Ä–∞–Ω–Ω—è.");
        }
    }
    
    public void Shoot(bool facingRight)
    {
        rb = GetComponent<Rigidbody2D>();
        rb.gravityScale = 0f;
        Vector2 direction = facingRight ? Vector2.right : Vector2.left;
        rb.linearVelocity = direction * speed;
        RotateToVelocity();
        if (pickupTrigger != null)
        {
            pickupTrigger.enabled = false;
        }
    }
    
    private void RotateToVelocity()
    {
        if (rb.linearVelocity != Vector2.zero)
        {
            float angle = Mathf.Atan2(rb.linearVelocity.y, rb.linearVelocity.x) * Mathf.Rad2Deg;
            transform.rotation = Quaternion.AngleAxis(angle, Vector3.forward);
        }
    }

    private void OnCollisionEnter2D(Collision2D collision)
    {
        if (collision.gameObject.CompareTag("Player"))
        {
            return;
        }
        
        if (hasLanded) return;
        
        EnemyBase enemy = collision.gameObject.GetComponent<EnemyBase>();
        if (enemy != null)
        {
            float finalDamage = damage;

            // üëª –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –ª–æ–≥—ñ–∫—É –∑ –ø—Ä–∏–≤–∏–¥–æ–º, –æ—Å–∫—ñ–ª—å–∫–∏ –≤—ñ–Ω —Ç–µ–ø–µ—Ä –∑–∞–≤–∂–¥–∏ —Ç—Ä–∏–≥–µ—Ä
            if (enemy is Rustborn)
            {
                Rustborn rustborn = (Rustborn)enemy;
                if (rustborn.HasArmor())
                {
                    finalDamage *= 0.5f;
                }
                enemy.TakeDamage(finalDamage);
            }
            
            // –°—Ç—Ä—ñ–ª–∞ –∑–∞—Å—Ç—Ä—è–≥–∞—î
            rb.isKinematic = true;
            rb.linearVelocity = Vector2.zero;
            rb.gravityScale = 0f;
            hasLanded = true;
            transform.parent = collision.transform;

            if (mainCollider != null) mainCollider.enabled = false;
            if (pickupTrigger != null) pickupTrigger.enabled = true;
            
            return;
        }

        // –õ–æ–≥—ñ–∫–∞ –¥–ª—è –∑—ñ—Ç–∫–Ω–µ–Ω–Ω—è –∑ —ñ–Ω—à–∏–º–∏ –æ–±'—î–∫—Ç–∞–º–∏
        rb.isKinematic = true;
        rb.linearVelocity = Vector2.zero;
        rb.gravityScale = 0f;
        hasLanded = true;
        
        transform.parent = collision.transform;

        if (mainCollider != null) mainCollider.enabled = false;
        if (pickupTrigger != null) pickupTrigger.enabled = true;
    }
    
    private void OnTriggerEnter2D(Collider2D collision)
    {
        if (hasLanded) return;

        EnemyBase enemy = collision.gameObject.GetComponent<EnemyBase>();
        if (enemy != null)
        {
            // üëª –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –ª–æ–≥—ñ–∫—É –∑ –ø—Ä–∏–≤–∏–¥–æ–º, –æ—Å–∫—ñ–ª—å–∫–∏ –≤—ñ–Ω –Ω–µ –æ—Ç—Ä–∏–º—É—î —à–∫–æ–¥–∏ –≤—ñ–¥ —Å—Ç—Ä—ñ–ª
            Nocktal nocktal = enemy.GetComponent<Nocktal>();
            if (nocktal != null)
            {
                 Debug.Log("–°—Ç—Ä—ñ–ª–∞ –ø—Ä–æ–π—à–ª–∞ –∫—Ä—ñ–∑—å –ø—Ä–∏–≤–∏–¥–∞!");
                 // –°—Ç—Ä—ñ–ª–∞ –Ω–µ –∑–Ω–∏—â—É—î—Ç—å—Å—è —ñ –Ω–µ –Ω–∞–Ω–æ—Å–∏—Ç—å —É—Ä–æ–Ω—É
            }
        }
    }
    
    private void OnTriggerStay2D(Collider2D collision)
    {
        if (hasLanded && collision.CompareTag("Player"))
        {
            // –õ–æ–≥—ñ–∫–∞ –ø—ñ–¥–∫–∞–∑–∫–∏ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É —Ç—É—Ç
        }
    }
}